@page "/"
@using ShoppingCart.Domain
@using ShoppingCart.Presentation.Services
@inject IProductService ProductService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Products</h3>

<div class="page-size-selector">
    <label for="pageSize">Items per page:</label>
    <select id="pageSize" @onchange="ChangePageSize">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="15">15</option>
        <option value="20">20</option>
    </select>
</div>

@if (products is null)
{
    <p>Loading...</p>
}
else
{
    <div class="product-grid">
        @foreach (var product in products.Data)
        {
            <div class="product-card">
                <img src="@product.Image" alt="@product.Title" />
                <h4>@product.Title</h4>
                <p>@product.Description</p>
                <strong>$@product.Price</strong>
                <p>⭐ @product.Stars</p>
                <p>Recommended: @(product.Recommendation ? "Yes" : "No")</p>
                <button @onclick="() => AddToCart(product)">Add to Cart</button>
            </div>
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage</span>
        <button @onclick="NextPage" disabled="@(_currentPage * PageSize >= totalProducts)">Next</button>
    </div>
}

<h3>Shopping Cart</h3>

@if (cart.Any())
{
    <ul>
        @foreach (var item in cart)
        {
            <li>
                @item.Title - $@item.Price
                <button @onclick="() => RemoveFromCart(item.Id)">Remove</button>
            </li>
        }
    </ul>

    <p><strong>Total Price:</strong> $@cart.Sum(p => p.Price)</p>
    <button @onclick="BuyItems">Buy</button>
}
else
{
    <p>Your cart is empty.</p>
}

@code {
    private PaginationResult<ProductWithRecommendation>? products;
    private int _currentPage = 1;
    private int PageSize { get; set; } = 5;
    private int totalProducts = 0;
    private List<ProductWithRecommendation> cart = new();
    private bool _cartLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            StateHasChanged();
        }
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProductsAsync(_currentPage, PageSize);
        totalProducts = products?.TotalItems ?? 0;
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value?.ToString() ?? "5");
        _currentPage = 1;
        await LoadProducts();
    }

    private async Task LoadCart()
    {
        if (_cartLoaded) return;

        var storedCart = await LocalStorage.GetItemAsync<List<ProductWithRecommendation>>("cart");
        if (storedCart is not null)
        {
            cart = storedCart;
        }

        _cartLoaded = true;
    }

    private async Task AddToCart(ProductWithRecommendation product)
    {
        cart.Add(product);
        await LocalStorage.SetItemAsync("cart", cart);
        StateHasChanged();
    }

    private async Task RemoveFromCart(int productId)
    {
        cart.RemoveAll(p => p.Id == productId);
        await LocalStorage.SetItemAsync("cart", cart);
        StateHasChanged();
    }

    private async Task BuyItems()
    {
        Console.WriteLine("Purchase Completed! Items:");
        foreach (var item in cart)
        {
            Console.WriteLine($"- {item.Title} - ${item.Price}");
        }

        cart.Clear();
        await LocalStorage.RemoveItemAsync("cart");
        StateHasChanged();
    }

    private async Task NextPage()
    {
        _currentPage++;
        await LoadProducts();
    }

    private async Task PreviousPage()
    {
        _currentPage--;
        await LoadProducts();
    }
}
